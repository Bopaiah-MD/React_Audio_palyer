{"ast":null,"code":"var _jsxFileName = \"/Users/bomd/Documents/Learnings /react-spotify/client/src/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from './useAuth';\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport Player from './Player';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"960f87b99f6f4a3eb3d37403ed0e6321\"\n});\n\nfunction Dashboard({\n  code\n}) {\n  _s();\n\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState(\"\");\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch(\"\");\n    setLyrics(\"\");\n  } //get lyrics api else comment \n\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.title,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]); // console.log(\"searchResults\", searchResults);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken); // udpate accesstoken here\n  }, [accessToken]); //search realted effect \n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true; // cancel the request api if new api request fired.\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        style: {\n          whiteSpace: \"pre\"\n        },\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"C/xkEiesDpJOEbcaLNXZ/RIs9iE=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/bomd/Documents/Learnings /react-spotify/client/src/Dashboard.js"],"names":["React","useState","useEffect","useAuth","Container","Form","SpotifyWebApi","TrackSearchResult","Player","axios","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","lyrics","setLyrics","chooseTrack","track","get","params","title","artist","then","res","data","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY","length","whiteSpace"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport useAuth from './useAuth'\nimport { Container, Form } from \"react-bootstrap\"\nimport SpotifyWebApi from \"spotify-web-api-node\"\nimport TrackSearchResult from \"./TrackSearchResult\"\nimport Player from './Player'\nimport axios from \"axios\"\n\nconst spotifyApi = new SpotifyWebApi({\n    clientId: \"960f87b99f6f4a3eb3d37403ed0e6321\",\n})\n\nfunction Dashboard({ code }) {\n\n    const accessToken = useAuth(code)\n    const [search, setSearch] = useState(\"\")\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState()\n    const [lyrics, setLyrics] = useState(\"\")\n\n\n    function chooseTrack(track) {\n        setPlayingTrack(track)\n        setSearch(\"\")\n        setLyrics(\"\")\n      }\n\n\n      //get lyrics api else comment \n\n    useEffect(() => {\n        if (!playingTrack) return\n\n        axios\n            .get(\"http://localhost:3001/lyrics\", {\n                params: {\n                    track: playingTrack.title,\n                    artist: playingTrack.artist,\n                },\n            })\n            .then(res => {\n                setLyrics(res.data.lyrics)\n            })\n    }, [playingTrack])\n\n   // console.log(\"searchResults\", searchResults);\n\n    useEffect(() => {\n        if (!accessToken) return;\n\n        spotifyApi.setAccessToken(accessToken);// udpate accesstoken here\n    }, [accessToken])\n\n    //search realted effect \n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        if (!accessToken) return;\n\n        let cancel = false\n        spotifyApi.searchTracks(search).then(res => {\n            if (cancel) return\n            setSearchResults(\n                res.body.tracks.items.map(track => {\n                    const smallestAlbumImage = track.album.images.reduce(\n                        (smallest, image) => {\n                            if (image.height < smallest.height) return image\n                            return smallest\n                        },\n                        track.album.images[0]\n                    )\n\n                    return {\n                        artist: track.artists[0].name,\n                        title: track.name,\n                        uri: track.uri,\n                        albumUrl: smallestAlbumImage.url,\n                    }\n                })\n            )\n        })\n        return () => (cancel = true) // cancel the request api if new api request fired.\n    }, [search, accessToken])\n\n\n    return (\n        <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n            <Form.Control\n                type=\"search\"\n                placeholder=\"Search Songs/Artists\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n            />\n            <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n                {searchResults.map(track => (\n                    <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\n                ))}\n                {searchResults.length === 0 && (\n          <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\n            {lyrics}\n          </div>\n        )}\n            </div>\n            <div><Player accessToken={accessToken} trackUri={playingTrack?.uri}/></div>\n        </Container>\n\n    )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}